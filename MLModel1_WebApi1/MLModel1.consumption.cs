// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
public partial class MLModel1
{
    /// <summary>
    /// model input class for MLModel1.
    /// </summary>
    #region model input class
    public class ModelInput
    {
        [ColumnName(@"_id")]
        public string __id { get; set; }

        [ColumnName(@"adult")]
        public string Adult { get; set; }

        [ColumnName(@"backdrop_path")]
        public string Backdrop_path { get; set; }

        [ColumnName(@"genre_ids[0]")]
        public float Genre_ids_0_ { get; set; }

        [ColumnName(@"genre_ids[1]")]
        public float Genre_ids_1_ { get; set; }

        [ColumnName(@"genre_ids[2]")]
        public float Genre_ids_2_ { get; set; }

        [ColumnName(@"genre_ids[3]")]
        public float Genre_ids_3_ { get; set; }

        [ColumnName(@"genre_ids[4]")]
        public float Genre_ids_4_ { get; set; }

        [ColumnName(@"genre_ids[5]")]
        public string Genre_ids_5_ { get; set; }

        [ColumnName(@"id")]
        public float Id { get; set; }

        [ColumnName(@"original_language")]
        public string Original_language { get; set; }

        [ColumnName(@"original_title")]
        public string Original_title { get; set; }

        [ColumnName(@"overview")]
        public string Overview { get; set; }

        [ColumnName(@"popularity")]
        public string Popularity { get; set; }

        [ColumnName(@"poster_path")]
        public string Poster_path { get; set; }

        [ColumnName(@"release_date")]
        public string Release_date { get; set; }

        [ColumnName(@"title")]
        public string Title { get; set; }

        [ColumnName(@"video")]
        public string Video { get; set; }

        [ColumnName(@"vote_average")]
        public string Vote_average { get; set; }

        [ColumnName(@"vote_count")]
        public string Vote_count { get; set; }

    }

    #endregion

    /// <summary>
    /// model output class for MLModel1.
    /// </summary>
    #region model output class
    public class ModelOutput
    {
        [ColumnName(@"_id")]
        public string __id { get; set; }

        [ColumnName(@"adult")]
        public string Adult { get; set; }

        [ColumnName(@"backdrop_path")]
        public string Backdrop_path { get; set; }

        [ColumnName(@"genre_ids[0]")]
        public float Genre_ids_0_ { get; set; }

        [ColumnName(@"genre_ids[1]")]
        public float Genre_ids_1_ { get; set; }

        [ColumnName(@"genre_ids[2]")]
        public float Genre_ids_2_ { get; set; }

        [ColumnName(@"genre_ids[3]")]
        public float Genre_ids_3_ { get; set; }

        [ColumnName(@"genre_ids[4]")]
        public float Genre_ids_4_ { get; set; }

        [ColumnName(@"genre_ids[5]")]
        public string Genre_ids_5_ { get; set; }

        [ColumnName(@"id")]
        public float Id { get; set; }

        [ColumnName(@"original_language")]
        public string Original_language { get; set; }

        [ColumnName(@"original_title")]
        public string Original_title { get; set; }

        [ColumnName(@"overview")]
        public uint Overview { get; set; }

        [ColumnName(@"popularity")]
        public string Popularity { get; set; }

        [ColumnName(@"poster_path")]
        public string Poster_path { get; set; }

        [ColumnName(@"release_date")]
        public string Release_date { get; set; }

        [ColumnName(@"title")]
        public string Title { get; set; }

        [ColumnName(@"video")]
        public string Video { get; set; }

        [ColumnName(@"vote_average")]
        public uint Vote_average { get; set; }

        [ColumnName(@"vote_count")]
        public string Vote_count { get; set; }

        [ColumnName(@"Score")]
        public float Score { get; set; }

    }

    #endregion

    private static string MLNetModelPath = Path.GetFullPath("MLModel1.zip");

    public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

    /// <summary>
    /// Use this method to predict on <see cref="ModelInput"/>.
    /// </summary>
    /// <param name="input">model input.</param>
    /// <returns><seealso cref=" ModelOutput"/></returns>
    public static ModelOutput Predict(ModelInput input)
    {
        var predEngine = PredictEngine.Value;
        return predEngine.Predict(input);
    }

    private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
    {
        var mlContext = new MLContext();
        ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
        return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
    }
}
